# This file was generated using Kotlin DSL (.github/workflows/build.main.kts).
# If you want to modify the workflow, please change the Kotlin file and regenerate this YAML file.
# Generated with https://github.com/typesafegithub/github-workflows-kt

name: 'Build'
on:
  push: {}
  pull_request: {}
jobs:
  check_yaml_consistency:
    name: 'Check YAML consistency'
    runs-on: 'ubuntu-latest'
    steps:
    - id: 'step-0'
      name: 'Check out'
      uses: 'actions/checkout@v4'
    - id: 'step-1'
      name: 'Execute script'
      run: 'rm ''.github/workflows/build.yaml'' && ''.github/workflows/build.main.kts'''
    - id: 'step-2'
      name: 'Consistency check'
      run: 'git diff --exit-code ''.github/workflows/build.yaml'''
  build:
    name: 'Build on ${{ matrix.os }}'
    runs-on: '${{ matrix.os }}'
    needs:
    - 'check_yaml_consistency'
    strategy:
      fail-fast: false
      matrix:
        os:
        - 'ubuntu-latest'
        - 'windows-latest'
        - 'macos-latest'
    steps:
    - id: 'step-0'
      name: 'Install Wine on Linux'
      run: |-
        sudo dpkg --add-architecture i386
        sudo wget -nc -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
        sudo wget -NP /etc/apt/sources.list.d/ "https://dl.winehq.org/wine-builds/ubuntu/dists/$(lsb_release -c | grep -o '\w*$')/winehq-$(lsb_release -c | grep -o '\w*$').sources"
        sudo apt update
        sudo apt install --yes --no-install-recommends winehq-stable
        winecfg /v win10
      if: 'runner.os == ''Linux'''
    - id: 'step-1'
      name: 'Install Wine on macOS'
      uses: 'tecolicom/actions-use-homebrew-tools@v1'
      with:
        tools: 'wine-stable'
        path: '/Applications /Library'
      if: 'runner.os == ''macOS'''
    - id: 'step-2'
      name: 'Cache InnoSetup installer on Linux and macOS'
      uses: 'actions/cache@v4'
      with:
        path: '${{ runner.temp }}/innosetup-6.4.3.exe'
        key: 'innosetup-6.4.3.exe'
      if: '(runner.os == ''Linux'') || (runner.os == ''macOS'')'
    - id: 'step-3'
      name: 'Provision InnoSetup on Linux and macOS'
      run: 'wget -O ${{ runner.temp }}/innosetup-6.4.3.exe https://files.jrsoftware.org/is/6/innosetup-6.4.3.exe'
      if: |-
        ((runner.os == 'Linux') || (runner.os == 'macOS'))
        && (steps.step-2.outputs.cache-hit == false)
    - id: 'step-4'
      name: 'Start Xvfb on Linux'
      run: 'Xvfb :0 -screen 0 1024x768x16 &'
      if: 'runner.os == ''Linux'''
    - id: 'step-5'
      name: 'Install InnoSetup on Linux'
      uses: 'Wandalen/wretry.action/main@v3'
      with:
        command: 'wine ${{ runner.temp }}/innosetup-6.4.3.exe /SP- /VERYSILENT /SUPPRESSMSGBOXES /NORESTART'
        pre_retry_command: 'echo ::warning::Reexecuting ${{ runner.temp }}/innosetup-6.4.3.exe'
        attempt_limit: '3'
        attempt_delay: '1000'
      env:
        DISPLAY: ':0.0'
      if: 'runner.os == ''Linux'''
    - id: 'step-6'
      name: 'Install InnoSetup on macOS'
      run: 'wine ${{ runner.temp }}/innosetup-6.4.3.exe /SP- /VERYSILENT /SUPPRESSMSGBOXES /NORESTART'
      if: 'runner.os == ''macOS'''
    - id: 'step-7'
      name: 'Configure Git'
      run: 'git config --global core.autocrlf input'
    - id: 'step-8'
      name: 'Checkout'
      uses: 'actions/checkout@v4'
    - id: 'step-9'
      name: 'Setup Java 11'
      uses: 'actions/setup-java@v4'
      with:
        java-version: '11'
        distribution: 'temurin'
    - id: 'step-10'
      name: 'Configure Build Properties for Linux'
      uses: 'DamianReeves/write-file-action@v1.3'
      with:
        path: 'build.properties'
        contents: |-
          wine.executable = wine
          winepath.executable = winepath
          innosetup.compiler.executable = /home/runner/.wine/drive_c/Program Files (x86)/Inno Setup 6/ISCC.exe
          innosetup.via.wine = true
      if: 'runner.os == ''Linux'''
    - id: 'step-11'
      name: 'Configure Build Properties for Windows'
      uses: 'DamianReeves/write-file-action@v1.3'
      with:
        path: 'build.properties'
        contents: 'innosetup.compiler.executable = C:/Program Files (x86)/Inno Setup 6/ISCC.exe'
      if: 'runner.os == ''Windows'''
    - id: 'step-12'
      name: 'Configure Build Properties for macOS'
      uses: 'DamianReeves/write-file-action@v1.3'
      with:
        path: 'build.properties'
        contents: |-
          wine.executable = wine
          winepath.executable = winepath
          innosetup.compiler.executable = /Users/runner/.wine/drive_c/Program Files (x86)/Inno Setup 6/ISCC.exe
          innosetup.via.wine = true
      if: 'runner.os == ''macOS'''
    - id: 'step-13'
      name: 'Build'
      run: 'ant -keep-going dist'
    - id: 'step-14'
      name: 'Upload All Result Files'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'All Artifacts'
        path: |-
          dist/jedit*manual-a4.pdf
          dist/jedit*manual-letter.pdf
          dist/jedit*source.tar.bz2
          dist/jedit*install.jar
          dist/jedit-*-noarch-1sao.tgz
          dist/jedit_*_all.deb
          dist/jedit*install.exe
          dist/jedit*install.dmg
          dist/jedit*-dist-mac-finish.tar.bz2
          dist/Packages
          dist/Packages.gz
          dist/Packages.bz2
          dist/Release
          dist/Release.gpg
        if-no-files-found: 'error'
        compression-level: '0'
      if: |-
        ((always())
        && (steps.step-13.outcome == 'success')) && (runner.os == 'macOS')
    - id: 'step-15'
      name: 'Verify Manual in A4 Paper size was Built'
      shell: 'bash'
      run: '[ -f dist/jedit*manual-a4.pdf ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-16'
      name: 'Save Manual in A4 Paper size to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit*manual-a4.pdf'
        key: '${{ github.run_id }} - Manual in A4 Paper size - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-15.outcome == 'success')
                            && (steps.step-15.outputs.found == 'true')
    - id: 'step-17'
      name: 'Verify Manual in Letter Paper size was Built'
      shell: 'bash'
      run: '[ -f dist/jedit*manual-letter.pdf ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-18'
      name: 'Save Manual in Letter Paper size to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit*manual-letter.pdf'
        key: '${{ github.run_id }} - Manual in Letter Paper size - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-17.outcome == 'success')
                            && (steps.step-17.outputs.found == 'true')
    - id: 'step-19'
      name: 'Verify Source Package was Built'
      shell: 'bash'
      run: '[ -f dist/jedit*source.tar.bz2 ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-20'
      name: 'Save Source Package to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit*source.tar.bz2'
        key: '${{ github.run_id }} - Source Package - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-19.outcome == 'success')
                            && (steps.step-19.outputs.found == 'true')
    - id: 'step-21'
      name: 'Verify Java based Installer was Built'
      shell: 'bash'
      run: '[ -f dist/jedit*install.jar ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-22'
      name: 'Save Java based Installer to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit*install.jar'
        key: '${{ github.run_id }} - Java based Installer - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-21.outcome == 'success')
                            && (steps.step-21.outputs.found == 'true')
    - id: 'step-23'
      name: 'Verify Slackware Installer was Built'
      shell: 'bash'
      run: '[ -f dist/jedit-*-noarch-1sao.tgz ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-24'
      name: 'Save Slackware Installer to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit-*-noarch-1sao.tgz'
        key: '${{ github.run_id }} - Slackware Installer - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-23.outcome == 'success')
                            && (steps.step-23.outputs.found == 'true')
    - id: 'step-25'
      name: 'Verify Debian Installer was Built'
      shell: 'bash'
      run: '[ -f dist/jedit_*_all.deb ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-26'
      name: 'Save Debian Installer to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit_*_all.deb'
        key: '${{ github.run_id }} - Debian Installer - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-25.outcome == 'success')
                            && (steps.step-25.outputs.found == 'true')
    - id: 'step-27'
      name: 'Verify Windows Installer was Built'
      shell: 'bash'
      run: '[ -f dist/jedit*install.exe ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-28'
      name: 'Save Windows Installer to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit*install.exe'
        key: '${{ github.run_id }} - Windows Installer - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-27.outcome == 'success')
                            && (steps.step-27.outputs.found == 'true')
    - id: 'step-29'
      name: 'Verify macOS Installer was Built'
      shell: 'bash'
      run: '[ -f dist/jedit*install.dmg ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        ((always())
        && (steps.step-13.outcome == 'success')) && (runner.os == 'macOS')
    - id: 'step-30'
      name: 'Save macOS Installer to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit*install.dmg'
        key: '${{ github.run_id }} - macOS Installer - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-29.outcome == 'success')
                            && (steps.step-29.outputs.found == 'true')
    - id: 'step-31'
      name: 'Verify macOS Intermediate Result was Built'
      shell: 'bash'
      run: '[ -f dist/jedit*-dist-mac-finish.tar.bz2 ] && echo ''found=true'' >>"$GITHUB_OUTPUT"'
      if: |-
        ((always())
        && (steps.step-13.outcome == 'success')) && (runner.os != 'macOS')
    - id: 'step-32'
      name: 'Save macOS Intermediate Result to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/jedit*-dist-mac-finish.tar.bz2'
        key: '${{ github.run_id }} - macOS Intermediate Result - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-31.outcome == 'success')
                            && (steps.step-31.outputs.found == 'true')
    - id: 'step-33'
      name: 'Verify Debian Repository Packages File was Built'
      shell: 'bash'
      run: '[ -f dist/Packages ] && echo ''found=true'' || true >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-34'
      name: 'Save Debian Repository Packages File to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/Packages'
        key: '${{ github.run_id }} - Debian Repository Packages File - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-33.outcome == 'success')
                            && (steps.step-33.outputs.found == 'true')
    - id: 'step-35'
      name: 'Verify Debian Repository Packages File (gz) was Built'
      shell: 'bash'
      run: '[ -f dist/Packages.gz ] && echo ''found=true'' || true >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-36'
      name: 'Save Debian Repository Packages File (gz) to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/Packages.gz'
        key: '${{ github.run_id }} - Debian Repository Packages File (gz) - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-35.outcome == 'success')
                            && (steps.step-35.outputs.found == 'true')
    - id: 'step-37'
      name: 'Verify Debian Repository Packages File (bz2) was Built'
      shell: 'bash'
      run: '[ -f dist/Packages.bz2 ] && echo ''found=true'' || true >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-38'
      name: 'Save Debian Repository Packages File (bz2) to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/Packages.bz2'
        key: '${{ github.run_id }} - Debian Repository Packages File (bz2) - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-37.outcome == 'success')
                            && (steps.step-37.outputs.found == 'true')
    - id: 'step-39'
      name: 'Verify Debian Repository Release File was Built'
      shell: 'bash'
      run: '[ -f dist/Release ] && echo ''found=true'' || true >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-40'
      name: 'Save Debian Repository Release File to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/Release'
        key: '${{ github.run_id }} - Debian Repository Release File - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-39.outcome == 'success')
                            && (steps.step-39.outputs.found == 'true')
    - id: 'step-41'
      name: 'Verify Debian Repository Release File Signature was Built'
      shell: 'bash'
      run: '[ -f dist/Release.gpg ] && echo ''found=true'' || true >>"$GITHUB_OUTPUT"'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-42'
      name: 'Save Debian Repository Release File Signature to Cache'
      uses: 'actions/cache/save@v4'
      with:
        path: 'dist/Release.gpg'
        key: '${{ github.run_id }} - Debian Repository Release File Signature - ${{ runner.os }}'
        enableCrossOsArchive: 'true'
      if: |2-
                            ((always())
        && (steps.step-13.outcome == 'success'))
                            && (steps.step-41.outcome == 'success')
                            && (steps.step-41.outputs.found == 'true')
    - id: 'step-43'
      name: 'Upload All Unexpected Result Files'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Unexpected Artifacts (${{ runner.os }})'
        path: |-
          dist
          !dist/jedit*manual-a4.pdf
          !dist/jedit*manual-letter.pdf
          !dist/jedit*source.tar.bz2
          !dist/jedit*install.jar
          !dist/jedit-*-noarch-1sao.tgz
          !dist/jedit_*_all.deb
          !dist/jedit*install.exe
          !dist/jedit*install.dmg
          !dist/jedit*-dist-mac-finish.tar.bz2
          !dist/Packages
          !dist/Packages.gz
          !dist/Packages.bz2
          !dist/Release
          !dist/Release.gpg
        if-no-files-found: 'ignore'
        compression-level: '0'
      if: |-
        (always())
        && (steps.step-13.outcome == 'success')
    - id: 'step-44'
      name: 'Verify No Unexpected Result Files'
      shell: 'bash'
      run: '[ ''${{ steps.step-43.outputs.artifact-id }}'' == '''' ]'
      if: |-
        (always())
        && (steps.step-43.outcome == 'success')
  upload-artifacts:
    name: 'Upload Individual Artifacts from one of the Jobs'
    runs-on: 'ubuntu-latest'
    needs:
    - 'build'
    - 'check_yaml_consistency'
    if: |-
      (always()
      && (needs.build.result != 'skipped'))
    steps:
    - id: 'step-0'
      name: 'Restore Manual in A4 Paper size from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit*manual-a4.pdf'
        key: '${{ github.run_id }} - Manual in A4 Paper size - macOS'
        restore-keys: '${{ github.run_id }} - Manual in A4 Paper size - '
    - id: 'step-1'
      name: 'Upload Manual in A4 Paper size'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Manual in A4 Paper size'
        path: 'dist/jedit*manual-a4.pdf'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-2'
      name: 'Restore Manual in Letter Paper size from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit*manual-letter.pdf'
        key: '${{ github.run_id }} - Manual in Letter Paper size - macOS'
        restore-keys: '${{ github.run_id }} - Manual in Letter Paper size - '
    - id: 'step-3'
      name: 'Upload Manual in Letter Paper size'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Manual in Letter Paper size'
        path: 'dist/jedit*manual-letter.pdf'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-4'
      name: 'Restore Source Package from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit*source.tar.bz2'
        key: '${{ github.run_id }} - Source Package - macOS'
        restore-keys: '${{ github.run_id }} - Source Package - '
    - id: 'step-5'
      name: 'Upload Source Package'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Source Package'
        path: 'dist/jedit*source.tar.bz2'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-6'
      name: 'Restore Java based Installer from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit*install.jar'
        key: '${{ github.run_id }} - Java based Installer - macOS'
        restore-keys: '${{ github.run_id }} - Java based Installer - '
    - id: 'step-7'
      name: 'Upload Java based Installer'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Java based Installer'
        path: 'dist/jedit*install.jar'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-8'
      name: 'Restore Slackware Installer from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit-*-noarch-1sao.tgz'
        key: '${{ github.run_id }} - Slackware Installer - macOS'
        restore-keys: '${{ github.run_id }} - Slackware Installer - '
    - id: 'step-9'
      name: 'Upload Slackware Installer'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Slackware Installer'
        path: 'dist/jedit-*-noarch-1sao.tgz'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-10'
      name: 'Restore Debian Installer from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit_*_all.deb'
        key: '${{ github.run_id }} - Debian Installer - macOS'
        restore-keys: '${{ github.run_id }} - Debian Installer - '
    - id: 'step-11'
      name: 'Upload Debian Installer'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Debian Installer'
        path: 'dist/jedit_*_all.deb'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-12'
      name: 'Restore Windows Installer from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit*install.exe'
        key: '${{ github.run_id }} - Windows Installer - macOS'
        restore-keys: '${{ github.run_id }} - Windows Installer - '
    - id: 'step-13'
      name: 'Upload Windows Installer'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Windows Installer'
        path: 'dist/jedit*install.exe'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-14'
      name: 'Restore macOS Installer from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit*install.dmg'
        key: '${{ github.run_id }} - macOS Installer - macOS'
        restore-keys: '${{ github.run_id }} - macOS Installer - '
    - id: 'step-15'
      name: 'Upload macOS Installer'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'macOS Installer'
        path: 'dist/jedit*install.dmg'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-16'
      name: 'Restore macOS Intermediate Result from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/jedit*-dist-mac-finish.tar.bz2'
        key: '${{ github.run_id }} - macOS Intermediate Result - macOS'
        restore-keys: '${{ github.run_id }} - macOS Intermediate Result - '
    - id: 'step-17'
      name: 'Upload macOS Intermediate Result'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'macOS Intermediate Result'
        path: 'dist/jedit*-dist-mac-finish.tar.bz2'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-18'
      name: 'Restore Debian Repository Packages File from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/Packages'
        key: '${{ github.run_id }} - Debian Repository Packages File - macOS'
        restore-keys: '${{ github.run_id }} - Debian Repository Packages File - '
    - id: 'step-19'
      name: 'Upload Debian Repository Packages File'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Debian Repository Packages File'
        path: 'dist/Packages'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-20'
      name: 'Restore Debian Repository Packages File (gz) from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/Packages.gz'
        key: '${{ github.run_id }} - Debian Repository Packages File (gz) - macOS'
        restore-keys: '${{ github.run_id }} - Debian Repository Packages File (gz) - '
    - id: 'step-21'
      name: 'Upload Debian Repository Packages File (gz)'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Debian Repository Packages File (gz)'
        path: 'dist/Packages.gz'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-22'
      name: 'Restore Debian Repository Packages File (bz2) from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/Packages.bz2'
        key: '${{ github.run_id }} - Debian Repository Packages File (bz2) - macOS'
        restore-keys: '${{ github.run_id }} - Debian Repository Packages File (bz2) - '
    - id: 'step-23'
      name: 'Upload Debian Repository Packages File (bz2)'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Debian Repository Packages File (bz2)'
        path: 'dist/Packages.bz2'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-24'
      name: 'Restore Debian Repository Release File from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/Release'
        key: '${{ github.run_id }} - Debian Repository Release File - macOS'
        restore-keys: '${{ github.run_id }} - Debian Repository Release File - '
    - id: 'step-25'
      name: 'Upload Debian Repository Release File'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Debian Repository Release File'
        path: 'dist/Release'
        if-no-files-found: 'ignore'
        compression-level: '0'
    - id: 'step-26'
      name: 'Restore Debian Repository Release File Signature from Cache'
      uses: 'actions/cache/restore@v4'
      with:
        path: 'dist/Release.gpg'
        key: '${{ github.run_id }} - Debian Repository Release File Signature - macOS'
        restore-keys: '${{ github.run_id }} - Debian Repository Release File Signature - '
    - id: 'step-27'
      name: 'Upload Debian Repository Release File Signature'
      uses: 'actions/upload-artifact@v4'
      with:
        name: 'Debian Repository Release File Signature'
        path: 'dist/Release.gpg'
        if-no-files-found: 'ignore'
        compression-level: '0'
