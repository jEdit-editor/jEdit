PLUGIN DEVELOPMENT (plugdev.txt, last modified 9 Dec 1998)

Contents
--------
1. Introduction
2. Edit Mode Development
2.1. Mode Interface
2.2. Mode Properties
2.3. Indentation
2.4. Syntax Colorizing
3. Command Development
3.1. Command Interface
3.2. Command Properties
3.3. Command Invocation
4. Creating a Simple Plugin
4.1. Create the Source File
4.2. Compile the Source File
4.3. Create the Properties File
4.4. Compile it
4.5. Install it
4.6. Test it

1. Introduction
---------------
This document contains information about jEdit plugin development. It 
is recommended that you read `plugins.txt' prior to this document. 

Plugins are stored in JAR files. The JAR file can contain two types of 
entries - properties and classes. Other types of entries are ignored. 

Property entries have a .props extension and should be in standard Java
property file format. Any property files in a plugin are loaded by the 
jEdit property manager automatically. 

Class entries have a .class extension. The jEdit command manager loads 
any classes in a plugin automatically.

2. Edit Mode Development
------------------------

2.1. Mode Interface
-------------------
The Mode interface is defined as follows:

	public interface org.gjt.sp.jedit.Mode
	{
		public void enter(Buffer buffer);
		public boolean indentLine(Buffer buffer, View view, int dot);
		public org.gjt.sp.jedit.syntax.TokenMarker createTokenMarker();
		public void leave(Buffer buffer);
	}

jEdit edit modes must be placed in the `org.gjt.sp.jedit.mode' package.
The methods of the Mode interface are described in the following 
sections.

2.2. Mode Properties
--------------------
The internal name of an edit mode is it's class name, without the 
package name. The human readable name, displayed in the status bar and 
`Mode' menu, is loaded from the `modename.<mode>' property, where 
<mode> is the mode's internal name. 

Property names prefixed with `mode.' are used to determine which edit 
mode to use to edit a specific buffer. 

If the filename contains a `.' character, jEdit sets the edit mode to 
the `mode.<extension>' property. For example, if the file `file.java' 
is opened, jEdit sets the edit mode to the value of the `mode.java' 
property. (Which will probably be `java'). 

If the filename doesn't contain a `.' character, the edit mode is set 
to the `mode.<filename>' property. For example, if the file `Makefile' 
is opened, jEdit sets the edit mode to the value of the `mode.Makefile' 
property. (Which will probably be `make'). 

Finally, if neither of those methods could be used to determine the 
edit mode, jEdit looks at the `mode.<first line>' property. For 
example, if a file's first line is `#!/bin/sh', jEdit will set the edit 
mode to the value of the `mode.#!/bin/sh' property. (Which will 
probably be `sh').

2.3. Indentation
----------------
When the `Tab' key is pressed, jEdit calls the indentLine() method of 
the current mode. The indentLine() method is defined as follows in the 
Mode interface:

	public boolean indentLine(Buffer buffer, View view, int caret);

`buffer' is the current buffer, `view' is the current view and `caret' 
is the caret position. 

Most indentation routines need nothing more than the current line. The 
following code chunk can be used to convert `caret' to a line number 
and fetch that line:

	Element map = buffer.getDefaultRootElement();
	Element lineElement = map.getElement(map.getElementIndex(caret));
	int start = lineElement.getStartOffset();
	int len = lineElement.getEndOffset() - start;
	try
	{
		String line = buffer.getText(start,len);
		// do indentation here
		buffer.remove(start,len);
		buffer.insertString(start,line,null);
	}
	catch(BadLocationException bl)
	{
		// this shouldn't happen, so print some offensive message
	}

2.4. Syntax Colorizing
----------------------
jEdit's syntax colorizing engine uses subclasses of the 
`org.gjt.sp.jedit.syntax.TokenMarker' class to split the source into 
`tokens'. Each type token is matched with a color and text in that 
token is drawn using that color. 

To do syntax colorizing, you must first write a TokenMarker subclass 
that tokenizes source code accordingly. Documentation for the 
TokenMarker will be provided when the API is finalized. For now, RTS 
(Read the source :) ). 

The createTokenMarker() class should return a new instance of your 
token marker. 

The token id to color table is loaded from the `colors.<mode>' 
property, where <mode> is the internal name of the mode. The table has 
the following format:

	id1@color id2@another_color ...

The allowed colors are: red, green, blue, yellow, orange, white,  
lightGray, gray, darkGray, black, cyan, magenta, and pink. Also, 
absolute RGB values can be specified in hexadecimal notation by 
prefixing the value with `#'.

3. Command Development
----------------------

3.1. Command Interface
----------------------
The Command interface is defined as follows:

	public interface org.gjt.sp.jedit.Command
	{
		public void exec(Buffer buffer, View view, String arg,
			Hashtable args);
	}

jEdit commands must be placed in the `org.gjt.sp.jedit.cmd' package. 
The methods of the Command interface are described in the following 
sections.

3.2. Command Properties
-----------------------
The label of the command in the `Plugins' menu is loaded from the 
`<name>.label' property, where <name> is the class name of the command, 
not including the package. A keyboard shortcut can also be specified in 
the `<name>.shortcut' property, but doing so is not advised because 
your shortcut might conflict with future versions of jEdit.

3.3. Command Invocation
-----------------------
When the command is selected from the `Plugins' menu, its exec() method 
is invoked. Currently, there is no API documentation for jEdit, but the 
source has plenty of comments. E-mail <sp@gjt.org> if you have any 
queries.

4. Creating a Simple Plugin
---------------------------
This section contains step by step instructions for creating a simple 
plugin. 

You will need a java compiler and the jar tool to follow this example.

4.1 Create the Source File
--------------------------
Create a file, SimplePlugin.java in the org.gjt.sp.jedit.cmd package, 
with the following in it:

// Simple jEdit plugin
package org.gjt.sp.jedit.cmd;
import java.util.Hashtable;
import org.gjt.sp.jedit.*;

public class SimplePlugin implements Command
{
	// Called when plugin is executed
	public void exec(Buffer buffer, View view, String arg, Hashtable args)
	{
		System.out.println("Hello from SimplePlugin.exec()!");
		view.getTextArea().replaceSelection("hello!!!");
	}
}

// End of SimplePlugin.java

4.2 Compile the Source File
---------------------------
Use the javac compiler to compile the source file. On Unix, do:

	javac -classpath $CLASSPATH:/opt/slava/share/jedit-<version>/jedit.jar \
		org/gjt/sp/jedit/cmd/SimplePlugin.java

On Windows 95 98 and NT, do:

	javac -classpath "%CLASSPATH%;C:\Program Files\jEdit\jedit.jar" \
		org\gjt\sp\jedit\cmd\SimplePlugin.java

The `-classpath' option tells javac where to look for jEdit's classes. 
An error such as this during compilation means that the classpath is 
wrong:

	org/gjt/sp/jedit/cmd/SimplePlugin.java:4: Interface Command of class
		SimplePlugin not found.
	public class SimplePlugin implements Command
	                                     ^
	1 error

If all goes well, go onto the next step.

4.3 Create the Properties File
------------------------------
Create a file, SimplePlugin.props, with the following in it:

# SimplePlugin.props: properties for simple plugin

# The menu item label that will appear in the Plugins menu
SimplePlugin.label=Simple Plugin

# End of SimplePlugin.props

4.4 Create the JAR File
-----------------------
Use the jar tool to create the JAR file:

	jar cf0 SimplePlugin.jar org/gjt/sp/jedit/cmd/SimplePlugin.class \
		SimplePlugin.props

Note that the first parameter is c-f-zero, not c-f-capital-o.

There should now be a file called SimplePlugin.jar. It is the finished 
plugin. 

4.5 Install it
--------------
Install the plugin in your personal plugins directory. On Unix:

	mkdir $HOME/.jedit-jars
	cp SimplePlugin.jar $HOME/.jedit-jars

On Windows 95 or 98:

	md %JAVAHOME%\.jedit-jars
	copy SimplePlugin.jar %JAVAHOME%\.jedit-jars

On Windows NT:

	md %HOME%\.jedit-jars
	copy SimplePlugin.jar %HOME%\.jedit-jars

4.6 Test it
-----------
Start jEdit. A message such as this should be printed:

	Loading plugin /home/slava/.jedit-jars/SimplePlugin.jar

The plugin should also appear in the Plugins menu. Select it. It should 
output `Hello from SimplePlugin.exec()!' and replace the current 
selection with `hello!!!'.

-- Slava Pestov
<sp@gjt.org>
