GETTING STARTED WITH JEDIT (starting.txt, last modified 13 Nov 1998)

Contents
--------
1. Starting jEdit
1.1. Unix & Clones
1.2. Windows 95 and 98
1.3. Windows NT
2. Opening Files
3. Saving Files
4. Editing Files
5. Markers
6. Search And Replace
7. Edit Modes
8. Customising jEdit

1. Starting jEdit
-----------------
Usually, jEdit is started to edit one or more files with this command:

	jedit <filename 1> <filename 2>...

You can instruct jEdit to open a file and move the caret to a specified
marker like this:

	jedit <filename 1>#<marker 1> <filename 2>#<marker 2>

Or if another instance of jEdit is already running, jOpen can be used to open
files in it:

	jopen <filename 1> <filename 2>...
	jopen <filename 1>#<marker 1> <filename 2>#<marker 2>...

jEdit can also be started with no arguments:

	jedit

In that case, it will open a new `Untitled' file. If jOpen is started with no
arguments, it opens a new view of the first buffer.

A number of options can be given to jEdit:

	-version: Print jEdit version and exit
	-usage: Print a command line usage
	-nousrprops: Don't load user properties
	-noserver: Don't start server
	-portfile=<file>: Write server port to <file>
	-readonly: Open files read only

jOpen accepts these options:

	-version: Print jOpen version and exit
	-usage: Print command line usage
	-portfile=<file>: Read server port from <file>
	-readonly: Open files read only

If you want to open a file whose name starts with a dash (-), you must place
the -- argument before it in the command line to stop it from being interpreted
as an option:

	jedit -- -file-whose-name-starts-with-dash

The -- indicates the end of options. No more options after it are interpreted.

1.1. Unix & Clones
------------------
You need to set the PATH variable to point to the directory with the jedit and
jopen scripts so that the shell can locate them. The default location is
/opt/slava/bin. If you're using a Bourne shell (sh, ash, jsh, bash, zsh) the
command to add /opt/slava/bin to the PATH is:

	set PATH=$PATH:/opt/slava/bin; export PATH

If you're using a C shell (csh, tcsh) the equivalent is:

	setenv PATH $PATH:/opt/slava/bin

It is advisable to place these commands in the .profile script (Bourne shell)
or the .csh.login script (C shell) so that the PATH will be set every time you
log in.

1.2. Windows 95 and 98
----------------------
If you want to use jEdit from the command line, you must add its directory to
the PATH. By default, jEdit is installed in C:\Program Files\jEdit. The command
to add that directory to the PATH is:

	set PATH=%PATH%;C:\Program Files\jEdit

It is advisable to place this command in your C:\AUTOEXEC.BAT so that it's
executed every time the computer starts up.

1.3. Windows NT
---------------
The PATH is set in the System control panel in Windows NT. The default
installation directory is the same as that in Windows 95/98.

2. Opening Files
----------------
Within jEdit, files can be opened for editing in one of three ways:

- With the `File->Open File' command, which shows a file selection dialog.
- With the `File->Open URL' command, which lets you type in a path name or URL.
- With the `File->New File' command, which creates a blank, untitled file.

A new buffer is created for each file, and the file's contents are loaded
into it. The file remains unchanged on disk until you save it.

3. Saving Files
---------------
Files can be saved back to disk in one of three ways:

- With the `File->Save' command, which saves the file immediately.
- With the `File->Save As' command, which shows a file selection dialog,
  allowing a different name for the file to be chosen.
- With the `File->Save To URL' command, which prompts for a path name or
  URL to save the file to.

The autosave feature protects against computer crashes. It saves open files at
fixed intervals, 30 seconds by default. When a file is autosaved, its name is
enclosed in `#' characters - for example, if you were editing the file
`HelloWorld.java', it would be autosaved to `#HelloWorld.java#'. If jEdit
crashes during an editing session, you can open the autosave file, and if it
contains important information, overwrite the original file with it.

The backup feature protects against the user's mistakes. When you save a
file, a tilde (`~') is added to the name of the original version before the
new version is saved - for example, if you made some changes to
`HelloWorld.java' and saved them, the original version, before the changes,
would be called `HelloWorld.java~'. If you make some changes that you didn't
like, you can revert to the last saved version by opening the backup file
and overwriting the new version with it.

4. Editing Files
----------------
Files are edited inside views. Each view can only edit one file at once, but
there can be any number of views open at once. More than one view can edit the
same file - changes made in one view automatically appear in the others.

The `File->New View' command creates a new view, set to the edit the same
file as the current one.

The `File->Close View' command closes the current view and exits jEdit if
there aren't any left.

The Buffers menu can be used to select which file the current view should be
editing.

Each view has a status bar. A sample status bar looks like this:

(--:**) rc.multi (Text, Line 124/124 100%)
 ^ ^ ^        ^    ^          ^   ^   ^
 | | |        |    |          |   |   |
 | | |        |    |          |   |   The caret position, as a percentage
 | | |        |    |          |   |
 | | |        |    |          |   The total number of lines in the file
 | | |        |    |          |
 | | |        |    |          The line number the caret is on
 | | |        |    |
 | | |        |    The current edit mode
 | | |        |
 | | |        The full pathname of the file
 | | |
 | | (**) if the has changed since last save, (--) if it hasn't
 | |
 | (/) if the file is read only, (:) if it's writeable
 |
(**) if the file is untitled, (--) if it's not

If you've ever used an editor such as nedit on Unix, Notepad on Windows
or SimpleText on the Mac you'll feel right at home in jEdit. jEdit works in
much the same way as the above editors. The menu item shortcuts are similar
as well.

5. Markers
----------
Most other editors can set `markers' in the text, and go to those markers.
jEdit's markers, however are saved across editing sessions and can have
names of any length. Markers are set with the `Edit->Set Marker' command,
cleared with `Edit->Clear Marker' and jumped to with `Edit->Go To Marker'.

6. Search And Replace
---------------------
Like most editors, jEdit supports regular expression search and replace. See
regexp.txt for details on regexp syntax.

7. Edit Modes
-------------
An editing mode defines a set of characteristics for editing files with a
certain format. jEdit comes with a plain text and a auto indent mode.
jEdit looks at the file's extension to determine which editing mode to use.
The mode can also be changed manually by selecting it from the `Edit->Mode'
menu.

In the plain text mode, the Tab key does what it does in other editors -
it inserts a Tab.

In the auto indent mode, the Tab key copies all white space from the start of
the previous line to the start of the current one. For example, if your
document looks like this:

	This is line one
	    This is line two, with several spaces at the start
	This is line three

Pressing Tab while the caret is on line three will make it look like this:

	This is line one
	    This is line two, with several spaces at the start
	    This is line three

Very useful for editing source code.

8. Customising jEdit
--------------------
Simple settings such as the font, print margins, word wrap and many
miscallanous options can be changed in the `Edit->Options' dialog. See
menus.txt and props.txt for information about customising menus and strings.

-- Slava Pestov
<slava_pestov@geocities.com>
