JEDIT PLUGINS (plugins.txt, last modified 14 Nov 1998)

Contents
--------
1. Introduction
2. Installing Plugins
3. Using Plugins
4. Developing Plugins
5. Creating a Simple Plugin
5.1 Create the Source File
5.2 Compile the Source File
5.3 Create the Properties File
5.4 Install it
5.5 Test it


1. Introduction
---------------
jEdit has a powerful plugin architecture. Plugins can be used to add almost
any feature to jEdit. They are easy to write and even easier to install.

2. Installing Plugins
---------------------
Plugins are distributed as JAR files. They have a .jar extension.

Plugins can be installed in one of two directories - the system plugin
directory and the user plugin directory. Plugins in the system directory
can be used by all users on the system. Plugins in a user's plugin directory
can only be used by the respective user.

On Unix, the system plugin directory is /opt/slava/share/jedit-1.1.2/jars,
Each user has a plugin directory in $HOME/.jedit-jars.

On Windows 95 and 98, the system plugin directory is
C:\Program Files\jEdit\jars. The user plugin directory is
%JAVAHOME%\.jedit-jars.

On Windows NT, the system plugin directory is the same as that on
Windows 95/98, but each user has a plugin directory in %HOME%\.jedit-jars.

3. Using Plugins
----------------
Once a plugin is installed, jEdit will say so during startup.

	Loading plugin /opt/slava/share/jedit-1.1.2/jars/reverse.jar
	Loading plugin /opt/slava/share/jedit-1.1.2/jars/rot13.jar

If all goes well during startup, the plugins should also appear in the 
`Plugins' menu. If a newly installed plugin doesn't appear to be loaded, check
that it's in the correct directory and that it's a JAR file.

If a plugin doesn't appear in the plugins menu but a `Loading...' message is
printed, the plugin might be incompatible with your version of jEdit.

4. Developing Plugins
---------------------
Plugins are stored in JAR files. The JAR file can contain two types of
entries - properties and classes. Other types of entries are ignored.

Property entries have a .props extension and should be in standard Java
property file format. Any property files in a plugin are loaded by the
jEdit property manager automatically.

Class entries have a .class extension. The jEdit command manager loads any
classes in a plugin automatically.

Classes which implement the `Command' interface and have a name prefixed with
`Cmd_' are added to the plugins menu. To find out how to give the plugin's
menu item a label, see menus.txt.

The Command interface defines the following method:

- public void exec(Buffer buffer, View view, String arg, Hashtable args)
  This method is called when the plugin is selected from the menu.

  buffer - the current buffer
  view - the current view
  arg - only used in internal commands, not in plugins
  args - reserved for additional parameters which might be used in the future

A public constructor which accepts no parameters must also be defined.

Classes which implement the `Mode' interface and have a name prefixed with
`Mode_' are added to the modes menu. The mode's name should be defined in the
`modename.<class name without Mode_ prefix>' property. To create an extension
to mode name mapping, define a property named `mode.<file extension>' with the
mode name as the value.

The Mode interface defines the following method:

- public boolean indentLine(Buffer buffer, int caret)
  This method is called when auto indent is enabled and the tab key is
  pressed. It should indent the line of the caret position accordingly.
  If no indentation is required, it should return false. This will cause
  a normal tab to be inserted.

A public constructor which accepts no parameters must also be defined.

Javadoc generated API documentation for jEdit can be found in the doc/api
directory in the jEdit distribution.

5. Creating a Simple Plugin
---------------------------
This section contains step by step instructions for creating a simple
plugin.

You will need a java compiler and the jar tool to follow this example.

5.1 Create the Source File
--------------------------
Create a file, Cmd_SimplePlugin.java, with the following in it:

// Simple jEdit plugin
import java.util.Hashtable;

public class Cmd_SimplePlugin implements Command
{
	// Constructor
	public Cmd_SimplePlugin
	{
	}
	
	// Called when plugin is executed
	public void exec(Buffer buffer, View view, String arg, Hashtable args)
	{
		System.out.println("Hello from SimplePlugin.exec()!");
		view.getTextArea().replaceSelection("hello!!!");
	}
}

// End of Cmd_SimplePlugin.java

5.2 Compile the Source File
---------------------------
Use the javac compiler to compile the source file. On Unix, do:

	javac -classpath $CLASSPATH:/opt/slava/share/jedit-1.1.2/jedit.jar \
		Cmd_SimplePlugin.java

On Windows 95 98 and NT, do:

	javac -classpath "%CLASSPATH%;C:\Program Files\jEdit\jedit.jar" \
		Cmd_SimplePlugin.java

The `-classpath' option tells javac where to look for jEdit's classes.
An error such as this during compilation means that the classpath is wrong:

	Cmd_SimplePlugin.java:4: Interface Command of class SimplePlugin
		not found.
	public class Cmd_SimplePlugin implements Command
	                                         ^
	1 error

If all goes well, go onto the next step.

5.3 Create the Properties File
------------------------------
Create a file, SimplePlugin.props, with the following in it:

# SimplePlugin.props: properties for simple plugin

# The menu item label that will appear in the Plugins menu
SimplePlugin.label=Simple Plugin

# End of SimplePlugin.props

5.4 Create the JAR File
-----------------------
Use the jar tool to create the JAR file:

	jar cf0 SimplePlugin.jar Cmd_SimplePlugin.class SimplePlugin.props

Note that the first parameter is c-f-zero, not c-f-capital-o.

There should now be a file called SimplePlugin.jar. It is the finished plugin. 

5.5 Install it
--------------
Install the plugin in your personal plugins directory. On Unix:

	mkdir $HOME/.jedit-jars
	cp SimplePlugin.jar $HOME/.jedit-jars

On Windows 95 or 98:

	md %JAVAHOME%\.jedit-jars
	copy SimplePlugin.jar %JAVAHOME%\.jedit-jars

On Windows NT:

	md %HOME%\.jedit-jars
	copy SimplePlugin.jar %HOME%\.jedit-jars

5.5 Test it
-----------
Start jEdit. A message such as this should be printed:

	Loading plugin /home/slava/.jedit-jars/SimplePlugin.jar

The plugin should also appear in the Plugins menu. Select it. It should output
`Hello from SimplePlugin.exec()!' and replace the current selection with
`hello!!!'.

-- Slava Pestov
<slava_pestov@geocities.com>
