JEDIT FREQUENTLY ASKED QUESTIONS

Please read this file before reporting bugs.

* Contents

- 1. JDK bugs that cause problems in jEdit
- 2. What happened to the console?
- 3. What happened to the `Open in WWW Browser' command?
- 4. What happened to the Rot13 and Reverse plugins?
- 5. Why are file permissions reset to the defaults when I save?
- 6. Why can't I copy and paste between jEdit and other applications?
- 7. Why do I get OutOfMemoryErrors?
- 8. Why do I get a ClassDefNotFoundError on startup?
- 9. Why is jEdit so slow?

* 1. JDK bugs that cause problems in jEdit

Before reporting a problem with jEdit, make sure it's not a JDK bug:

- Bug #4060861 - not having your computer's host name aliased to
127.0.0.1 will cause RMI to throw an AccessException (fixed in JDK 1.1.8
and 1.2, Unix only)
- Bug #4186108, maybe others - printing doesn't work very well with JDK
1.2 (not yet fixed)
- Bug #4159610 - Alt key menu mnemonics insert the mnemonic character
into the text (the bug parade lists it as being fixed in a `non-public
release', so it should appear in a new JDK soon)
- Bug #4122687 - the AltGr key doesn't work (fixed in JDK 1.1.8 and 1.2)
- Bug ???? - windows are created about 4 pixels smaller than requested
(this only occurs on Unix with some window managers, the only workaround
is to disable geometry saving in File->Global Options->General)
- Bug ???? - cursor handling in lightweight components is broken
- Bug ???? - the HTMLEditorKit (hence the jEdit help viewer) is buggy
and doesn't support some HTML

* 2. What happened to the console?

As of jEdit version 2.0, the console is a plugin distributed separately
from jEdit. Download it from <http://www.icg-online.de/jedit/>.

* 3. What happened to the `Open in WWW Browser' command?

As of jEdit version 2.0, the `Open in WWW Browser' command is a plugin
distributed separately from jEdit. Download it from
<http://www.icg-online.de/jedit/>.

* 4. What happened to the Rot13 and Reverse plugins?

You mean you actually *USE* them? As of jEdit 2.0, Rot13 and Reverse
have been rolled into Mike Dillon's TextTools plugin, which is
distributed separately from jEdit. Download it from
<http://www.icg-online.de/jedit/>.

* 5. Why are file permissions reset to the defaults when I save?

This occurs because of a Java limitation. The only workaround is to
disable backups in `File->Global Options->General'.

* 6. Why can't I copy and paste between jEdit and other applications?

If you're using jEdit on a Unix system, you will not be able to access
the `middle-mouse-button' cut buffer, only the Motif clipboard. This is
due to the way the JDK is implemented on Unix.

A crude workaround is to use an application that supports both
clipboards, such as nedit, to transfer data.

Some people also reported that copy & paste doesn't work very well on
Windows, either. So the JDK sucks when it comes to clipboard handling.

* 7. Why do I get OutOfMemoryErrors?

When you have lots of buffers open, there might not be enough free space
in the Java heap, even though lots of RAM is available. The solution is
to increase the Java heap memory allocation.

On Windows, enter the following in an MS-DOS Prompt before starting
jEdit, or place it in your AUTOEXEC.BAT to have it done every time the
system starts:

set JEDIT=-mxNNm

On Unix systems with a Bourne shell (ash, bash, jsh, sh, zsh) enter the
following in a command line before starting jEdit, or place it in your
.login or .profile to have it done every time you log in:

set JEDIT=-mxNNm; export JEDIT

On Unix systems with a C shell (csh, tcsh) enter the following in a
command line before starting jEdit, or place it in your .csh.login or
.csh.profile to have it done every time you log in:

setenv JEDIT -mxNNm

Where NN is the size of the Java heap, in megabytes. The default is 32
Mb - if you like to open lots of files at once, 64 might be better.

Note that JDK 1.1.8 has a dynamic heap, so this is not necessary.

* 8. Why do I get a ClassDefNotFoundError on startup?

If you get a `ClassDefNotFoundError' when jEdit is starting up, the most
likely problem is that you do not have Swing 1.1 or later installed
properly. For jEdit to work, Swing 1.1 or later must be installed, and
it's swingall.jar file must be in the CLASSPATH.

Swing can be downloaded from <java.sun.com/products/jfc/index.html>.

* 9. Why is jEdit so slow?

Because jEdit is written in Java, it's performance will always be slower
than native applications. A fast system with a good JVM will narrow the
performance gap.

On all systems, a speedup can be achieved by installing the latest Swing
version. Swing 1.1.1 seems to be much faster than Swing 1.1final.

Installing more RAM may improve performance - more RAM will result in
less garbage collection.

On Linux, try installing the TYA JIT
<ftp://gonzales.cyberus.ca/pub/Linux/java>.

-- Slava Pestov
<sp@gjt.org>
